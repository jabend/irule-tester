#!/bin/bash

# Most of the variables defined in this library cannot be overridden in the
# test case file.  Variables that can be overridden are 
# specifically called out in the comment preceeding the variable.

# ====================
# Initialize variables
# ====================

# Collect the current time to use for test duration calculation

typeset -r startTime=$(date +%s)

# Define output color variables

typeset  NORMAL='\033[0m'
typeset  RED='\033[1;31;40m'
typeset  GREEN='\033[1;32;40m'
typeset  YELLOW='\033[1;33;40m'
typeset  ORANGE='\033[1;38;130m'

# Base curl command.  Leverages -s (silent mode) and -S (show errors even 
# when asked to be silent).

typeset -r curlCmd='/usr/bin/curl -s -S'

# Set the default user agent.  This is necessary if the site is using an 
# ASM for content blocking, or if the iRule logic uses user agent data to 
# decide how to route traffic.

typeset -r defaultAgent='F5 iRule Tester'

# Set the current user agent from the defaultAgent.  This variable may be 
# overridden in the test case file.

typeset userAgent="${defaultAgent}"

# Initialize the counters for the number of passing, warning, and failed 
# test cases.  These variables will increment during the test, and therefore
# must me overidable.

typeset passCount='0'
typeset warnCount='0'
typeset failCount='0'

# Enable/disable checking for custom sorry content page during testing.  
# Enabling this feature requires a valid value for the sorryText variable.

typeset -r checkSorry='1'

# Contains the source text that will match when the sorry content is returned
# from a request.  Requires that the checkSorry variable be set to 1

typeset -r sorryText='Unfortunately, we are not able to process your request at this time. We apologize for any inconvenience'

# Enable/disable checking for custom ASM block page during testing.  
# Enabling this feature requires a valid value for the asmText variable.

typeset -r checkAsm='1'

# Contains the source text that will match when the ASM block page is returned
# from a request.  Requires that the checkASM variable be set to 1

typeset -r asmText='Your request was rejected due to a content exception'

# The number of seconds to wait on a request before giving up and 
# closing the connection.  This value is used for the should_discard function.

typeset -r connectTimeout='5'


# =====================================
# Parse and validate supplied arguments
# =====================================

function printUsage {

   printf "${RED}\nUsage: $(basename $0) -s target_site [ -o (plain|tap) ]\n\n${NORMAL}"

}

# Parse options
while getopts ":o:s:" Option ; do
  case $Option in
    o ) outputFormat=${OPTARG} ;;
    s ) targetSite=${OPTARG} ;;
    * ) printUsage && exit ;;
  esac
done

# Verify options were passed
[[ $targetSite == "" ]] && printUsage && exit

# If the outputFormat variable is set to "plain" or "tap", unset the variables
# assigned for the color-based output, which will remove the color from the
# output
( [[ "$outputFormat" == "plain" ]] || [[ "$outputFormat" == "tap" ]] ) && {
  unset NORMAL RED GREEN YELLOW ORANGE
}

# ========================
# Define testing functions
# ========================

# This function is to be used as a documented placeholder to identify this test
# case as not currently testable.  When used, this function marks the test case
# as a warning to indicate it needs further attention.
#
# Required arguments:
#   1) Test case ID

function cannot_test {

  local testCase=$1

  ((warnCount++))
  printMsg "WARN" "$testCase" "logic not currently testable"

}

# This function tests if the requested URL is discarded by the F5.  If the
# requested URL is discarded, the request will timeout after the number of
# seconds defined in the connectTimeout variable.
#
# Required arguments:
#   1) Test case ID
#   2) The requested URL that should be discarded

function should_discard {

  local testCase=$1
  local reqUrl=$2

  $curlCmd -A "$userAgent" -m $connectTimeout $reqUrl > /dev/null 2>&1 && {
    printMsg "ERROR" "$testCase" "$reqUrl" "failed to discard request"
    ((failCount++))
  } || {
    printMsg "INFO" "$testCase" "$reqUrl" "discarded request as expected"
    ((passCount++))
  }
}

# This function tests if the requested URL redirects as expected.  If the
# requested URL is discarded, the request will timeout after the number of
# seconds defined in the connectTimeout variable.
#
# Required arguments:
#   1) Test case ID
#   2) The requested URL that should be redirected
#   3) The URL that the requested URL should be redirected to

function should_redirect {

  local testCase=$1
  local reqUrl=$2
  local destUri=$3

  local redirectResp=$($curlCmd -A "$userAgent" $reqUrl -I | egrep "^[Ll]ocation: " | dos2unix)
  local location=$(echo $redirectResp | sed 's/^[Ll]ocation: //g')

  [[ -z $location ]] && {
    printMsg "ERROR" "$testCase" "$reqUrl" "redirect failed, could not find 'location' header"
    ((failCount++))
    return
  }

  [[ "$destUri" == "$location" ]] && {
    printMsg "INFO" "$testCase" "$reqUrl" "redirects to $location as expected"
    ((passCount++))
    check_for_sorry $reqUrl
    check_for_asm $reqUrl
    return
  } || {
    printMsg "ERROR" "$testCase" "$reqUrl" "expected redirect to $destUri but found $location"
    ((failCount++))
    return
  }
}

# This function tests if the requested URL is sent to a pool and if so, which 
# pool was selected.  This test requires that either 1) the targeted virtual
# server is using cookie persistence, or 2) the HTTP_RESPONSE irule that
# accompanies this code is has been applied to the target virtual server.
#
# This function also checks for the defined sorry or ASM block content, if the 
# feature is enabled.
#
# Required arguments:
#   1) Test case ID
#   2) The requested URL that should be sent to a pool
#   3) A regular expression taht will match the name of the selected pool

function should_select_pool {

  local testCase=$1
  local reqUrl=$2
  local destPool=$3

  local poolResp=$($curlCmd -A "$userAgent" $reqUrl -I | egrep -o "^Set-Cookie: BIGipServer${destPool}|Set-Cookie: LastSelectedPool=/Common/${destPool}" | dos2unix)
  local selectedPool=$(echo $poolResp | sed 's/^Set-Cookie: BIGipServer//g' | sed 's/^Set-Cookie: LastSelectedPool=\/Common\///g' | awk '{print $1}')

  [[ -z $selectedPool ]] && {
    printMsg "ERROR" "$testCase" "$reqUrl" "failed to find pool selection in header"
    ((failCount++))
    return 

  } || {

    printMsg "INFO" "$testCase" "$reqUrl" "selected pool $selectedPool as expected"
    ((passCount++))

    [[ $checkAsm == 1 ]] && check_for_asm $reqUrl && {
      ((warnCount++))
      printMsg "WARN" "$testCase" "$reqUrl" "content matches 'ASM' block page"
      return
    }

    [[ $checkSorry == 1 ]] && check_for_sorry $reqUrl && {
      ((warnCount++)) 
      printMsg "WARN" "$testCase" "$reqUrl" "content matches 'Sorry' page"
    }

  }

}

# This function checks the source of the requested URL to see if it matches
# the defined sorry content.  If the response to the requested page is a 
# redirect, the redirect is followed.
#
# Required arguments:
#   1) The requested URL that should be sent to a pool

function check_for_sorry {

  local reqUrl=$1

  $curlCmd -L -A "$userAgent" $reqUrl | grep -q "$sorryText"

}

# This function checks the source of the requested URL to see if it matches
# the defined ASM block page
#
# Required arguments:
#   1) The requested URL that should be sent to a pool

function check_for_asm {

  local reqUrl=$1

  $curlCmd -L -A "$userAgent" $reqUrl | grep -q "$asmText"

}

# This function displays the test header at the degining of each test suite

function display_header {

  printMsg "HEADER" "Testing $targetSite"

}

# This function reports the total number of passing, warning, and failing
# test cases, as well and calculates and reports the amount of time taken to
# complete the entire test suite

function report_results {

  local totalTests=$(expr $passCount + $warnCount + $failCount)

  [[ $failCount > 0 ]] && {
    printMsg "FAILREPORT" "Pass: $passCount, Warn: $warnCount, Fail: $failCount, Total: $totalTests"
  } || {
    printMsg "PASSREPORT" "Pass: $passCount, Warn: $warnCount, Fail: $failCount, Total: $totalTests"
  }

  local endTime=$(date +%s)
  printMsg "PASSREPORT" "Test took $(( $endTime - $startTime )) seconds"

}

# This function formats the test results from each testcase based on which 
# result was found and passed (INFO, WARN, ERROR)
#
# Required arguments:
#   1) The message type for this event. Must be one of:
#        INFO, WARN, ERROR, FAILREPORT, PASSREPORT, HEADER
#   2) Test case ID
#   3) The requested URL that was tested
#   4) The message to display with the event

function printMsg {

  msgType=$1
  testCase=$2
  reqUrl=$3
  msg=$4

  [[ "$msgType" == "FAILREPORT" ]] && {
    printf "${RED}\n%s\n${NORMAL}" "$2"
    return
  }

  [[ "$msgType" == "PASSREPORT" ]] && {
    printf "${GREEN}\n%s\n${NORMAL}" "$2"
    return
  }

  [[ "$msgType" == "HEADER" ]] && {
    printf "${NORMAL}\n\t%s\n\n${NORMAL}" "$2"
    return
  }

  # Output format specifically for TAP (Test Anything Protocol)
  [[ "$outputFormat" == "tap" ]] && {

    [[ "$msgType" == "ERROR" ]] && {
      printf "${RED}not ok %s - %s\n  # %s\n${NORMAL}" "$testCase" "$reqUrl" "$msg"
      return
    }
  
    [[ "$msgType" == "WARN" ]] && {
      printf "${ORANGE}not ok %s - #SKIP %s %s\n${NORMAL}" "$testCase" "$reqUrl" "$msg"
      return
    }
  
    [[ "$msgType" == "INFO" ]] && {
      printf "${NORMAL}ok %s - %s - %s\n${NORMAL}" "$testCase" "$reqUrl" ""
      return
    }

  } || {

    # Default output format
    [[ "$msgType" == "ERROR" ]] && {
      printf "${RED}F - %s - %s\n\t%s\n${NORMAL}" "$testCase" "$reqUrl" "$msg"
      return
    }
  
    [[ "$msgType" == "WARN" ]] && {
      printf "${ORANGE}W - %s - %s\n\t%s\n${NORMAL}" "$testCase" "$reqUrl" "$msg"
      return
    }
  
    [[ "$msgType" == "INFO" ]] && {
      printf "${NORMAL}P - %s - %s\n\t%s\n${NORMAL}" "$testCase" "$reqUrl" "$msg"
      return
    }

  }

}
